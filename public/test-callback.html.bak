<!DOCTYPE html>
<html>
<head>
    <title>Test Payment Callback</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        button { padding: 10px 20px; margin: 5px; background: #007cba; color: white; border: none; border-radius: 3px; cursor: pointer; }
        button:hover { background: #005a87; }
        pre { background: #f5f5f5; padding: 10px; border-radius: 3px; overflow-x: auto; }
        .success { color: green; }
        .error { color: red; }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
</head>
<body>
    <h1>Test Payment Callback</h1>
    
    <div class="test-section">
        <h3>1. Prvo kreiraj temp rezervaciju</h3>
        <button onclick="createTempReservation()">Kreiraj Temp Rezervaciju</button>
        <div id="temp-result"></div>
    </div>

    <div class="test-section">
        <h3>2. Zatim testiraj callback</h3>
        <input type="text" id="shared-secret" placeholder="Unesi shared secret" style="width:300px;">
        <button onclick="testCallback()">Test Callback</button>
        <div id="callback-result"></div>
    </div>

    <div class="test-section">
        <h3>3. Provjeri rezervacije u bazi</h3>
        <button onclick="checkReservations()">Provjeri Rezervacije</button>
        <div id="reservations-result"></div>
    </div>

    <script>
        let merchantTransactionId = '';
        let lastReservationDate = ''; // Dodaj ovu liniju

        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        function getRandomLicensePlate(length = 7) {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            let plate = '';
            for (let i = 0; i < length; i++) {
                plate += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return plate;
        }

        function getRandomReservationDate() {
            const today = new Date();
            const maxDays = 89;
            const randomDays = getRandomInt(0, maxDays);
            const futureDate = new Date(today.getTime() + randomDays * 24 * 60 * 60 * 1000);
            // Format: YYYY-MM-DD
            return futureDate.toISOString().split('T')[0];
        }

        async function createTempReservation() {
            const resultDiv = document.getElementById('temp-result');
            resultDiv.innerHTML = 'Kreiram temp rezervaciju...';

            try {
                // Prvo dohvati CSRF token
                await fetch('/sanctum/csrf-cookie', { credentials: 'include' });
                const xsrf = getCookie('XSRF-TOKEN');

                // Generiši drop-off slot (manji broj - ujutru)
                let dropOffSlot = Math.floor(Math.random() * 20) + 1; // 1-20 (ujutru)

                // Generiši pick-up slot (veći broj - popodne)
                let pickUpSlot = Math.floor(Math.random() * (40 - dropOffSlot)) + dropOffSlot + 1; // dropOffSlot+1 do 40 (popodne)

                let reservationDate = getRandomReservationDate();
                const tempPayload = {
                    drop_off_time_slot_id: dropOffSlot,
                    pick_up_time_slot_id: pickUpSlot,
                    reservation_date: reservationDate, // koristi promenljivu
                    user_name: 'Test Company',
                    country: 'ME',
                    license_plate: getRandomLicensePlate(),
                    vehicle_type_id: 1,
                    email: 'test@example.com'
                };
                lastReservationDate = reservationDate; // zapamti datum

                const response = await fetch('/api/temp-reservation', {
                    method: 'POST',
                    credentials: 'include',
                    headers: { 
                        'Content-Type': 'application/json', 
                        'Accept': 'application/json',
                        'X-XSRF-TOKEN': decodeURIComponent(xsrf)
                    },
                    body: JSON.stringify(tempPayload)
                });

                const data = await response.json();
                
                if (data.merchant_transaction_id) {
                    merchantTransactionId = data.merchant_transaction_id;
                    resultDiv.innerHTML = `<div class="success">✅ Temp rezervacija kreirana!<br>Merchant Transaction ID: ${merchantTransactionId}</div>`;
                } else {
                    resultDiv.innerHTML = `<div class="error">❌ Greška: ${JSON.stringify(data)}</div>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="error">❌ Greška: ${error.message}</div>`;
            }
        }

        async function testCallback() {
            const resultDiv = document.getElementById('callback-result');
            
            if (!merchantTransactionId) {
                resultDiv.innerHTML = '<div class="error">❌ Prvo kreiraj temp rezervaciju!</div>';
                return;
            }

            resultDiv.innerHTML = 'Šaljem test callback...';

            try {
                // Simuliraj Bankart callback payload
                const callbackPayload = {
                    "result": "OK",
                    "uuid": "test-uuid-123",
                    "merchantTransactionId": merchantTransactionId,
                    "purchaseId": "20250629-test-123",
                    "transactionType": "DEBIT",
                    "paymentMethod": "Creditcard",
                    "amount": "50.00",
                    "currency": "EUR",
                    "customer": {
                        "billingAddress1": "Test street 1",
                        "billingCity": "Kotor",
                        "billingPostcode": "85330",
                        "billingCountry": "ME",
                        "email": "test@example.com",
                        "ipAddress": "127.0.0.1"
                    },
                    "returnData": {
                        "_TYPE": "cardData",
                        "type": "visa",
                        "cardHolder": "Test User",
                        "expiryMonth": "12",
                        "expiryYear": "2025",
                        "binDigits": "41111111",
                        "firstSixDigits": "411111",
                        "lastFourDigits": "1111",
                        "fingerprint": "test-fingerprint",
                        "threeDSecure": "MANDATORY",
                        "eci": "05",
                        "binBrand": "VISA",
                        "binBank": "TEST BANK",
                        "binLevel": "",
                        "binCountry": "US"
                    },
                    "extraData": {
                        "adapterReferenceId": "test-ref-123"
                    }
                };

                const contentType = "application/json; charset=utf-8";
                const date = new Date().toUTCString();
                const requestUri = "/api/payment/callback";
                const bodyRaw = JSON.stringify(callbackPayload);
                const bodyHash = CryptoJS.SHA512(bodyRaw).toString(CryptoJS.enc.Hex);
                const message = `POST\n${bodyHash}\n${contentType}\n${date}\n${requestUri}`;
                const sharedSecret = "092160279780a31ef02ebb76e5c4a8d238733fc0016cec0a47";
                const signatureWordArray = CryptoJS.HmacSHA512(message, sharedSecret);
                const signature = CryptoJS.enc.Base64.stringify(signatureWordArray);

                const response = await fetch('/api/payment/callback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': contentType,
                        'Accept': 'application/json',
                        'X-Signature': signature,
                        'X-Date': date
                    },
                    body: bodyRaw
                });

                const data = await response.text();
                
                if (response.ok) {
                    resultDiv.innerHTML = `<div class="success">✅ Callback uspješan!<br>Response: ${data}</div>`;
                } else {
                    resultDiv.innerHTML = `<div class="error">❌ Callback greška (${response.status}): ${data}</div>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="error">❌ Greška: ${error.message}</div>`;
            }
        }

        async function checkReservations() {
            const resultDiv = document.getElementById('reservations-result');
            resultDiv.innerHTML = 'Provjeravam rezervacije...';

            try {
                if (!lastReservationDate) {
                    resultDiv.innerHTML = `<div class="error">❌ Nije poznat datum rezervacije. Prvo kreiraj temp rezervaciju.</div>`;
                    return;
                }
                const response = await fetch('/api/reservations/by-date?date=' + encodeURIComponent(lastReservationDate));
                const data = await response.json();
                
                if (Array.isArray(data) && data.length > 0) {
                    // Sortiraj po created_at opadajuće, pa uzmi prvi
                    data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
                    const last = data[0];
                    resultDiv.innerHTML = `<div class="success">✅ Poslednja rezervacija:<br><pre>${JSON.stringify(last, null, 2)}</pre></div>`;
                } else {
                    resultDiv.innerHTML = `<div class="error">❌ Nema rezervacija za taj datum.</div>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="error">❌ Greška: ${error.message}</div>`;
            }
        }

        function getCookie(name) {
            let value = `; ${document.cookie}`;
            let parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }
    </script>
</body>
</html> 